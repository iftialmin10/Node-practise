git status
git add .
git commit -m " my commit message"
git push origin master

extra
git pull origin main

Before running any Nodejs code always check node module. If not there any 
node module than install it by "npm install". Another important thing is 
when we upload any code in github or share code with someone by zip than 
remove the node module file. 


nodemon:
In node always check folder name in which we run the code by terminal.
After installing nodemon in windows first check version. If no version 
show then go to nodemon folder in C drive and delete ps1 file.
For stop nodemon press 'ctrl+C'

Version of npm
chalk@2.4.1
validator@10.8.0
nodemon@1.18.5
request@2.88.0
express@4.16.4
hbs@4.0.1

At the time of installing npm module we face ton of question and we set 
the answer by default. For avoiding this after write "npm init" 
press "ctrl+c" to shutdown. After that use "npm init -y" to set all value 
as default.

debugger: 
In our programme we used console.log() for debug our programme. 
Its a basic tool and also time consuming. Everytime we write console than 
again need to remove those line. By default debugger dont pause the 
programme. For running this we have to use "inspect" after "node" keyword 
and remaining all are same. Through debugger we can go to developer mode 
and can see everything in chrome browser. After that go to 
"chrome://inspect". If u dont see anything under remote target than u have
to configure it, for this u have configure this as same as listening 
option in console "127.0.0.1:9229". After that go to any of the inspect 
mode and ta ta new window open with new thing. In other language there are
main function in which programme can run but in chrome 8 there a function 
called script run the programme from top to bottom. To access all the file 
from developer tool u have to add folder from left_side bar. press Esc 
button for toggle console. If u close the developer tool and want to 
debug again than simply write "restart" keyword in vscode console. 
If u want to close the developer tool than repeat twice "ctrl+c". 
After working with debugger than remove the keyword from programme.

Asynchronous:
In Asynchronous Node.js there are script, console, callstack, Node_APIs, 
callback queue and event loop. In nodejs there have by default main 
function which holds the whole script. Call stack holds the function only
when the function is called and when the function done the its also 
pop off from the stack. Console.log is also a function. Javascript is a 
single thread programming language but Nodejs is not a single thread 
language. If any function of Javascript not supported in v8 engine but 
nodejs support them by itself with c++ language and than nodejs register 
this function in Node APIs. Since programme is written in single thread 
but nodejs have other thread remaining in c++ thats why we dont have to 
completely wait and this is the non blocking nature of nodejs. 
Javascript is a single threaded its work with function following call 
stack but node js by c++ its handle the events in Node_APIs. 
Callback queue maintain a list of all of the call back function that are 
ready to get executed. Callback queue always check the Node APIs register 
list, and wait for which event done first its work. After finishing first 
work done in Node APIs, callback queue check there are any function 
remaining inside the callback queue, if remaining than execute them first 
than look after to callback queue, if not than it pick up the iteam from 
Node APIs to callback queue and ready to execute. 
Before executed it needed to added to the call stack thats where function 
go to run. In this stage event loop play its role. Event loop did two 
things here , 1st one is it check call stack queue is empty or not, 
if empty than it added callback function to call stack to execute, 2nd one
is checking callback queue has any iteam or not, if remaining it added 
to call stack and if not remaing than it pick a finished function from 
Node APIs. Event loop keep waiting callback queue until the main function 
pop off from the call stack queue. Node is an non blocking system thats 
why it print randomly finished work.

Async is multi-thread, which means operations or programs can run in 
parallel.Sync is single-thread, so only one operation or program will 
run at a time.Async is non-blocking, which means it will send multiple 
requests to a server. Sync is blocking â€” it will only send the server 
one request at a time and will wait for that request to be answered by 
the server. Async increases throughput because multiple operations can 
run at the same time. Sync is slower and more methodical.


Collect weather data from "openweathermap"

For chrome browser read json data add extension "JSON Fromatter"

mapbox offer location web based service

For using express in new directory first install or initialize npm module 
"npm init -y". Than use "npm i express@4.16.4".

For running js file but this file is not include in root folder than 
use "node src/app.js". After running this server is up and runnig 
but for stop server use "ctrl+c"

For running server dont have any idea if we add new route. For this we 
need to stop server and have to restart the server again. But it is 
painful for each and every-time to resart the server. To solve this 
issue use nodemon "src/app.js".

we use hbs instead handlerbars to integret this module with express. 
If we want to serve up a static document than we can continue to put 
them in public but if we need a dynamic content than handlebars is 
probably the best. So if we use index.hbs than delete or remove 
'index.html' from public folder. Note that from website or server no one 
can access or read hbs file. 'index.hbs' nothing but a index.html. 
By hbs we can chsnge our website static to dynamic. We can configure or 
rename views and also for that we have to set the absolute path

In hbs we can assign value as like {{value}} and can also comment by 
{{! comment}}

nodemon only restart .js or express file but not .hbs file after saving 
file. But both of them need to load the templates(dir name) but doesnt 
restarted when new templates are created the server. But we can easily 
address this by customizing our node on command. For solving this issue
we need to close nodemon first by 'ctrl+c' than write the command 
'nodemon src/app.js -e js,hbs'. Here -e flag for extension.

If we get the error when we use partial as like dont find partial than 
change the register_path as root to only /.

If we want to access or read something or value from .hbs file to other 
.hbs file than in 2nd .hbs use {{>1st_file_name.hbs}}

If someone search a directory which we dont support than give them a 
useful message as like 404 in our homepage. Through wild-card we can 
do single or bunch of request. 

Note: when we use render method but from a inside of a folder not root 
folder than please follow the following structure: 
res.render(__dirname + 'render_file_path(root to render file directory)'
{here write properties as like object}). But if view file or render file 
or folder is inside of root directory thanuse normal rule.

To use query string it get provided on the end of the url, we start them
off with a question mark and then we provide key value pairs to pass 
addional information to the server. If we want to add more key in the 
url than use '&'. Base of our information search them isnide our code in
'req.query'

Query_string: it was provided along with the request has been passed by 
express and the data is made available to us in this object.

App deployment:

Git: 
It allows us to put our application under version control thats going 
to allow us to track the changes to our app over time.

Github:
 It is going to allow us to backup our source code and collaborate with 
 others.

 Heroku: 
 It is going to give us everything we need to deploy our nodejs 
 application to a production server. So our app is accessible 
 with just a single URL.

 Heroku:
 After installing heroku close the terminal and restart the terminal.
 Heroku provide us useful cmd for use.

GIT:
 In git there are four stage:- Untracked file, Unstaged changes, Staged
 changes and commits. In git 'read.md' a markdown file which contains 
 the documentation for our project. If we want to staged single folder 
 or file then use 'git add folder_name/' or 
 'git add folder_name/file_name'. We can also track our code without
 creating any repository in github web-site but in our local machine
 with '.git' file. But if we want to store our code in online than we need
 to create repository in github. We can also push our existing repository
 to github by following second step. In second step after running 
 second command it will fail bcz its not sure of exactly who's sending it
  the code but we need to do is finalize our SSH configaration. So get that
  done what we need to do is take take the public key file and give that 
  to github.com. So it can create that secure connection. For this we can
  do the following step:

  1) First go to settings and left_side we find SSH and GPG key,

  2) Second step is to trying to setup a new SSH key by clicking new SSH key,

  3) In third step there asking for two things one is title and other one
  is key, titel may "work laptop" or "work desktop" its easy to remember
  the key

  4) The next one is key file, that is id_rsa.pub, to find this from 
  terminal we use 

  'cat ~/.ssh/id_rsa.pub'. 
  
  After that we get a long string
  start with ssh-rsa and ends with email which one we use in comment or 
  key spcace.

  5) we are gonna copy that to the clipboard and we are gonna use that over
  the text field name 'key' and then we click to add.

  6) to test the connection we use in git bash 
  
  "ssh -T git@github.com" . 

  This is going to test our SSH connection to the github server. After that
  use yeas key to confirm. Then we get successful message. Here also note 
  that we see in tfhe terminal that "github does not provide shell access"
  Now we are ready to push our code. 

  7) Finally we are ready to run our second command.




SSH:
We can share our code with third party service in secure way by SSH. 
SSH stands for secure shell and it gives us a means of securely 
communicating with another machine. When we are using windows thats mean
our terminal not support all the command. We need to install git_bash. 
For using all cmd use bash. 

Important cmd:
ls/ ls -a = list (if we use -a then hidden file and folder are shown up)
ls -a -l = listed out hidden all and also in organize way.
ls -a -l ~/.ssh = its path of tilda(~)

If we have a file called 'id (underscore) RSA' and another called 
'id (underscore) RSA.pub'. Thats means we do already have a set of SSH 
keys and we could choose to use those instead of creating new one. 

If we dont have a key then run below command to create SSH key:

'ssh-keygen -t rsa -b 4096 -C "email-address"'

This command allow us to generate SSH key pair. There are three argument 
provided, first one is 't' stands for type and here we use 'rsa', second 
one is 'b' stands for bits and we will specify how many bits for this key
we want enough to be secure, The most common value is '4096', last one 'C'
(capital C) this is where we can provide a comment for the key what we 
can think of as a label and its common to use our email address inside of
here. Press enter for all value set default. After running this cmd to check
ssh key pair than 1st cmd run again. Here ./ mean main directory , 
../ means root directory. After running command we found two things
'id_rsa' its a secret file which we are gonna keep on our machine and we 
are never gonna share, and other second one is public file 'id_rsa.pub' 
and this one we can share with github and heroku. This file can secure the
communication with server and our machine. For future use if we set up an 
conection we follow two step. First we need to do is make sure our 
programme is running and second is to going register our new private key
file. For this we run the command 

'eval `ssh-agent -s`'

if we get id than our prog is running. After running this last is 
register the file by running the following command:

'ssh-add ~/.ssh/id_rsa' (here we provide private file id path)

After running this command we can see the identity has been added, now
when we try to facilitate an SSH communication.


@@@ Deploying nodejs to heroku:
After github setup we have to change the remote from main to heroku.
For heroku we dont need to touch the heroku website instead we can access
from terminal. To work with heroku we need to setup SSH public key file
with heroku. For that we can run only single command:

'heroku keys:add'
 
after running this a question arise which public_key which one we want 
to upload to heroku with y/n ans. After pressing y we will see our SSH key
is associated with our heroku account and we are gonna be able to securely
send code back and forth. We can create our heroku application by using

"heroku create unique_name" ex: ifti-weather-app

we need to create it in our root of our project. After running this command
First one, its actually going to create a new application on the heroku servers
and second one its sptting out to url. First is a location where we can
view our application , this is the live url for the app and the second 
is the url for the get repository where we should be pushing the code we 
want to deploy. Before deploying our application if we visit the first url
than we see welcome message instead application. 

Before we deploying:
we have to provide it with some basic instruction of what to do when it 
gets our code. One of the most important things we need to change has to
do with whats inside of 'package.json'. So in order for heroku to start up
our application we have to tell it which file to run. Normally we run our
code in terminal as like 'node app.js' , we also run this command in heroku
but first we need to specify it to 'package.json' file in script object. 
In script its allow us to set up scripts, these are key value pairs. 
The key is a name for the script and the value is what to run from 
the terminal. In script object we can set property with a command which 
heroku use for running our code. Here key is '"start"' and key value is 
'"node src/app.js"' , after setting this up , if heroku runs that command
its going to start the application up correctly. Now this start script is 
not limited for heroku, its also used in locally. For using locally we
use 'npm run start' in the terminal. Its same for both heroku and local 
use in terminal. After running this command we will see our port is 
activate. But for heroku gives us a dynamic port value thats why we need
to change our port value from app.js file. There we declare a new 
variable after app variable to hold port number. We set value by 'or' 
operator , thats mean either we get port number from heroku or we set 
port number. For taking port number from heroku we use 
'port = process.env.PORT || 3000'. And we use this port variable down 
below 'app.listen' and swap this port variable with '3000'.
Now our final step is fixed the address which remain in clinet side 
Javascript. There we fetch address with local-host port, we need to 
change this local port address('http://localhost:3000/weather?address=' to 
'/weather?address'). After that we add and commit this to github and after
that for pushing this code we use 'git push' to push our code up to the 
origin remote. From here we can now push up to the heroku by changing 
remote , before changing remote we shold check available remote list by 
'git remote'. After that for deploying our we have to do is use 
'git push heroku master'. After runnig this command our latest commits up
to the heroku get reomte. When heroku sees that new commits have been pushed
its going to deploy our application again. After running this command we 
will see that our dependency for our application is installing. 



If we change our code for application we should change them in both github
and heroku also by following steps:

Note: If we change anything in our code first we always need to run them 
in local host address before deploying to heroku. Its very important. 

For accessing our local host first we need to run 
'nodemon src/app.js -e js,hbs or npm run start', 
after that our local host address activated. After changing our code , 
its time to push to github and heroku by following step:

git status
git add .
git commit -m " my commit message"
git push
git push heroku master
end

Every time when we restart our programme we need to run 'nodemon' command.
But we can handle this issue with creating property in 'package.json' 
script. For this we named key name as '"dev":"nodemon src/app.js -e js,hbs"'
after that we simply run this command by 'npm run dev'. Here we can 
access nodemon from our all project bcz we install as a global module. 
The problem with global module is that they are not local dependencies.
So if we are using them in a specific project its best to try to install 
everything locally. If we share this code with other to add new feature 
so they download the code and they dont get node modules bcz thats ignored
with get ignore. After installing npm node module to their machine they
get package by only package.json thats are local dependencies not global.
This mean new package.json ignore global nodemon module. Although they 
install node but it may not matched with version and etc thats why this 
module dont work to their code. For solving this issue we should uninstall
nodemon globally by: 
"npm uninstall -g nodemon" 

and after that we need to 
reinstall nodemon as a local dependency, something thasts actually listed
in "package.json" by :
"npm install nodemon@1.2.0 --save-dev". 
When we 
install something and we use save dev it list it as a "dev dependency "
in our project. Dev dependenciesour dependencies we only need on our local
machine. Our developing dependencies arent installed in our production 
environment which means nodemon is not installed on heroku and heroku 
never uses the "dev script". After installing nodemon as a local dependencies
than we can use it by following command: "npm run dev"


Thats why its version not stored in package.json file and when we share our
code with other to work, he/she didnt find the module though they install
node_module.


MONGODB:
SQL: Its stand for structured query language
MONGODB is a NOSQL database. NOSQL stands for not only structured query 
language. MONGODB provides nodejs developer with npm module that can easily
be used to read and write from the database. 

SQL vs NoSQL:

SQL:
1. In SQL our data is stored in a table called database. We may have many
table for the user
2. In SQL there are row /record  and column

NOSQL:
1. Its referred to as a collection, we may have many collection as its need.
2. In NOSQL there are document look a whole lot like json and here column
means field.

Collection: A collection is a list of entries. Those individual entries 
are referred to as document and a document can have as many fields as we 
need .

